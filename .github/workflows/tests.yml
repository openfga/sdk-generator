name: Run Tests

on:
  push:
    branches:

jobs:
  test-generator:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Shellcheck
        run: make shellcheck

  build-and-test-js-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup git
        run: ./scripts/setup_git.sh
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}

      - name: Clone the existing SDK
        run: ./scripts/clone_sdk.sh
        env:
          GITHUB_ORG_ID: ${{ secrets.JS_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.JS_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.JS_SDK_SSH_KEY }}
          SDK_PATH: clients/fga-js-sdk
          KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run SDK Tests
        run: make test-client-js

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: clients/fga-js-sdk/ --sarif-file-output=snyk-js.sarif

      - name: Install FOSSA CLI
        run: |-
          mkdir -p ~/.local/bin
          export PATH=$PATH:$HOME/.local/bin
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh -b ~/.local/bin | bash

      - name: Run FOSSA scan and upload build data
        working-directory: clients/fga-js-sdk
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: |-
          export PATH=$PATH:$HOME/.local/bin
          fossa test

      - name: Check for SDK changes
        run: ./scripts/commit_push_changes.sh
        env:
          SDK_PATH: clients/fga-js-sdk
          DRY_RUN: 1
          TAGGING_DISABLE: 1
          GITHUB_ORG_ID: ${{ secrets.JS_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.JS_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.JS_SDK_SSH_KEY }}

  build-and-test-go-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup git
        run: ./scripts/setup_git.sh
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}

      - name: Clone the existing SDK
        run: ./scripts/clone_sdk.sh
        env:
          GITHUB_ORG_ID: ${{ secrets.GO_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.GO_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.GO_SDK_SSH_KEY }}
          SDK_PATH: clients/fga-go-sdk
          GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=$tmpdir/known_hosts"
          KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run SDK Tests
        run: make test-client-go

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: clients/fga-go-sdk/ --sarif-file-output=snyk-golang.sarif

      - name: Install FOSSA CLI
        run: |-
          mkdir -p ~/.local/bin
          export PATH=$PATH:$HOME/.local/bin
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh -b ~/.local/bin | bash

      - name: Run FOSSA scan and upload build data
        working-directory: clients/fga-go-sdk
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: |-
          export PATH=$PATH:$HOME/.local/bin
          fossa test

      - name: Check for SDK changes
        run: ./scripts/commit_push_changes.sh
        env:
          SDK_PATH: clients/fga-go-sdk
          DRY_RUN: 1
          TAGGING_DISABLE: 1
          GITHUB_ORG_ID: ${{ secrets.GO_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.GO_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.GO_SDK_SSH_KEY }}

  build-and-test-dotnet-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup git
        run: ./scripts/setup_git.sh
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}

      - name: Clone the existing SDK
        run: ./scripts/clone_sdk.sh
        env:
          GITHUB_ORG_ID: ${{ secrets.DOTNET_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.DOTNET_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.DOTNET_SDK_SSH_KEY }}
          SDK_PATH: clients/fga-dotnet-sdk
          KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run All Tests
        run: make test-client-dotnet

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: clients/fga-dotnet-sdk/src/OpenFga.Sdk/ --sarif-file-output=snyk-dotnet.sarif

      - name: Install FOSSA CLI
        run: |-
          mkdir -p ~/.local/bin
          export PATH=$PATH:$HOME/.local/bin
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh -b ~/.local/bin | bash

      - name: Run FOSSA scan and upload build data
        working-directory: clients/fga-dotnet-sdk
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: |-
          export PATH=$PATH:$HOME/.local/bin
          fossa test
        # Note at the moment, our .NET SDK is failing FOSSA b/c of `Microsoft.NET.Sdk` - though we have gotten the clearance from the legal team to use it
        continue-on-error: true

      - name: Check for SDK changes
        run: ./scripts/commit_push_changes.sh
        env:
          SDK_PATH: clients/fga-dotnet-sdk
          DRY_RUN: 1
          TAGGING_DISABLE: 1
          GITHUB_ORG_ID: ${{ secrets.DOTNET_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.DOTNET_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.DOTNET_SDK_SSH_KEY }}

  build-and-test-python-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup git
        run: ./scripts/setup_git.sh
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}

      # Commented out for now until we publish the SDK
      - name: Clone the existing SDK
        run: ./scripts/clone_sdk.sh
        env:
          GITHUB_ORG_ID: ${{ secrets.DOTNET_SDK_GITHUB_ORG_ID }}
          GITHUB_REPO_ID: ${{ secrets.DOTNET_SDK_GITHUB_REPO_ID }}
          SSH_KEY: ${{ secrets.DOTNET_SDK_SSH_KEY }}
          SDK_PATH: clients/fga-python-sdk
          KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run All Tests
        run: make test-client-python

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: clients/fga-python-sdk/src/OpenFga.Sdk/ --sarif-file-output=snyk-python.sarif

      - name: Install FOSSA CLI
        run: |-
          mkdir -p ~/.local/bin
          export PATH=$PATH:$HOME/.local/bin
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh -b ~/.local/bin | bash

      - name: Run FOSSA scan and upload build data
        working-directory: clients/fga-python-sdk
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: |-
          export PATH=$PATH:$HOME/.local/bin
          fossa test

      # Commented out for now until SDK is published
      #- name: Check for SDK changes
      #  run: ./scripts/commit_push_changes.sh
      #  env:
      #    SDK_PATH: clients/fga-python-sdk
      #    DRY_RUN: 1
      #    TAGGING_DISABLE: 1
      #    GITHUB_ORG_ID: ${{ secrets.PYTHON_SDK_GITHUB_ORG_ID }}
      #    GITHUB_REPO_ID: ${{ secrets.PYTHON_SDK_GITHUB_REPO_ID }}
      #    SSH_KEY: ${{ secrets.PYTHON_SDK_SSH_KEY }}
