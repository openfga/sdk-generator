{
  "appName": "OpenFGA",
  "applicationDescription": "OpenFGA is an open source software, released and currently maintained by Auth0 and based on Auth0 FGA. OpenFGA aims to provide the framework to solve fine-grained authorization at scale. It is built around the concepts outlined in Google's Zanzibar paper in 2019",
  "appShortName": "OpenFga",
  "appCamelCaseName": "openFga",
  "appUpperCaseName": "OPENFGA",
  "appTitleCaseName": "OpenFGA",
  "appLongName": "OpenFGA",
  "packageDescription": "OpenFGA SDK",
  "packageDetailedDescription": "This is an autogenerated SDK for OpenFGA. It provides a wrapper around the [OpenFGA API definition](https://openfga.dev/api).",
  "operationIdPrefix": "OpenFGAService",
  "author": "OpenFGA",
  "gitHost": "github.com",
  "gitUserId": "openfga",
  "userAgent": "openfga-sdk $sdk_language/$package_version",
  "supportInfo": "https://discord.gg/8naAwJfWN6",
  "docsUrl": "https://openfga.dev/docs",
  "apiDocsUrl": "https://openfga.dev/api/service",
  "websiteUrl": "https://openfga.dev",
  "copyrightNotice": "Copyright (c) 2022 the OpenFGA contributors <contact@openfga.dev> (https://openfga.dev)",
  "redditUrl": null,
  "licenseId": "Apache-2.0",
  "licenseBadgeId": "Apache_2.0",
  "twitterUserName": "openfga",
  "discordUrl": "https://discord.gg/8naAwJfWN6",
  "discordServerId": "759188666072825867",
  "discordChannelId": "930524706854031421",
  "templateDir": "/config/template",
  "sampleApiDomain": "fga.example",
  "packageTags": [
    "openfga",
    "authorization",
    "fga",
    "fine-grained-authorization",
    "rebac",
    "zanzibar"
  ],
  "files": {
    "gitignore.mustache": {
      "destinationFilename": ".gitignore",
      "templateType": "SupportingFiles"
    },
    "CHANGELOG.md.mustache": {
      "destinationFilename": "CHANGELOG.md",
      "templateType": "SupportingFiles"
    },
    "LICENSE.mustache": {
      "destinationFilename": "LICENSE",
      "templateType": "SupportingFiles"
    },
    "CONTRIBUTING.md.mustache": {
      "destinationFilename": "CONTRIBUTING.md",
      "templateType": "SupportingFiles"
    },
    "VERSION.mustache": {
      "destinationFilename": "VERSION.txt",
      "templateType": "SupportingFiles"
    },
    ".fossa.yml.mustache": {
      "destinationFilename": ".fossa.yml",
      "templateType": "SupportingFiles"
    },
    ".github/CODEOWNERS.mustache": {
      "destinationFilename": ".github/CODEOWNERS",
      "templateType": "SupportingFiles"
    },
    ".github/ISSUE_TEMPLATE/bug_report.md.mustache": {
      "destinationFilename": ".github/ISSUE_TEMPLATE/bug_report.md",
      "templateType": "SupportingFiles"
    },
    ".github/ISSUE_TEMPLATE/feature_request.md.mustache": {
      "destinationFilename": ".github/ISSUE_TEMPLATE/feature_request.md",
      "templateType": "SupportingFiles"
    },
    "NOTICE.mustache": {
      "destinationFilename": "NOTICE.txt",
      "templateType": "SupportingFiles"
    },
    ".github/workflows/semgrep.yaml": {}
  },
  "retryMaxAllowedNumber": 15,
  "defaultMaxRetry": 15,
  "defaultMinWaitInMs": 100,
  "clientMaxMethodParallelRequests": 10,
  "clientMethodHeader": "X-OpenFGA-Client-Method",
  "clientBulkRequestIdHeader": "X-OpenFGA-Client-Bulk-Request-Id"
}
