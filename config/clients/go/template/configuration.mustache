{{>partial_header}}
package {{packageName}}

import (
    "net/http"

    "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/credentials"
    "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/utils"
)

const (
    SdkVersion = "{{packageVersion}}"

    defaultUserAgent = "{{{userAgent}}}"
)

// RetryParams configures configuration for retry in case of HTTP too many request
type RetryParams struct {
    MaxRetry    int `json:"maxRetry,omitempty"`
    MinWaitInMs int `json:"minWaitInMs,omitempty"`
}

// Configuration stores the configuration of the API client
type Configuration struct {
	ApiScheme      string                   `json:"api_scheme,omitempty"`
	ApiHost        string                   `json:"api_host,omitempty"`
	StoreId        string                   `json:"store_id,omitempty"`
	Credentials    *credentials.Credentials `json:"credentials,omitempty"`
	DefaultHeaders map[string]string        `json:"default_headers,omitempty"`
	UserAgent      string                   `json:"user_agent,omitempty"`
    Debug          bool                     `json:"debug,omitempty"`
    HTTPClient     *http.Client
    RetryParams    *RetryParams
}

// DefaultRetryParams returns the default retry parameters
func DefaultRetryParams() *RetryParams {
	return &RetryParams{
		MaxRetry: {{{defaultMaxRetry}}},
		MinWaitInMs: {{{defaultMinWaitInMs}}},
	}
}

func GetSdkUserAgent() string {
    return defaultUserAgent
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(config Configuration) (*Configuration, error) {
    cfg := &Configuration{
        ApiScheme:      config.ApiScheme,
        ApiHost:        config.ApiHost,
        StoreId:        config.StoreId,
        Credentials:    config.Credentials,
        DefaultHeaders: make(map[string]string),
        UserAgent:      GetSdkUserAgent(),
        Debug:          false,
        RetryParams:    config.RetryParams,
    }

    if cfg.ApiScheme == "" {
        cfg.ApiScheme = "https"
    }

    err := cfg.ValidateConfig()

    if err != nil {
        return nil, err
    }

    return cfg, nil
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
    c.DefaultHeaders[key] = value
}

// ValidateConfig ensures that the given configuration is valid
func (c *Configuration) ValidateConfig() error {
    if c.ApiHost == "" {
        return reportError("Configuration.ApiHost is required")
    }

    if c.ApiScheme == "" {
        return reportError("Configuration.ApiScheme is required")
    }

    if !IsWellFormedUri(c.ApiScheme + "://" + c.ApiHost) {
        return reportError("Configuration.ApiScheme and Configuration.ApiHost (%s) do not generate a valid uri", c.ApiScheme+"://"+c.ApiHost)
    }

    if c.Credentials != nil {
        if err := c.Credentials.ValidateCredentialsConfig(); err != nil {
            return reportError("Credentials are invalid: %v", err)
        }
    }

    if c.RetryParams != nil && c.RetryParams.MaxRetry > {{retryMaxAllowedNumber}} {
        return reportError("Configuration.RetryParams.MaxRetry exceeds maximum allowed limit of {{retryMaxAllowedNumber}}")
    }

    if c.StoreId != "" && !utils.IsWellFormedUlidString(c.StoreId) {
		return reportError("Configuration.StoreId is not a valid ulid")
    }

    return nil
}
