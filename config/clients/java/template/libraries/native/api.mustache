{{>licenseInfo}}
package {{package}};

import static {{basePackage}}.util.StringUtil.isNullOrWhitespace;
import static {{basePackage}}.util.Validation.assertParamExists;

import {{authPackage}}.*;
import {{configPackage}}.*;
import {{clientPackage}}.*;
import {{telemetryPackage}}.Attribute;
import {{telemetryPackage}}.Attributes;
import {{telemetryPackage}}.Telemetry;
import {{basePackage}}.util.Pair;
import {{basePackage}}.util.StringUtil;
import {{errorsPackage}}.*;

{{#imports}}
import {{import}};
{{/imports}}

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

{{#hasFormParamsInSpec}}
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

{{/hasFormParamsInSpec}}
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

{{#asyncNative}}
import java.util.concurrent.CompletableFuture;
{{/asyncNative}}

{{#operations}}

/**
 * A low-level API representation of an OpenFGA server.
 * <p>
 * Most code should favor the simpler and higher-level {@link OpenFgaClient} when calling an OpenFGA server.
 */
public class OpenFgaApi {
  private final Configuration configuration;

  private final ApiClient apiClient;
  private final OAuth2Client oAuth2Client;
  private final Telemetry telemetry;

  public OpenFgaApi(Configuration configuration) throws FgaInvalidParameterException {
    this(configuration, new ApiClient());
  }

  public OpenFgaApi(Configuration configuration, ApiClient apiClient) throws FgaInvalidParameterException {
    this.apiClient = apiClient;
    this.configuration = configuration;
    this.telemetry = new Telemetry(this.configuration);

    if (configuration.getCredentials().getCredentialsMethod() == CredentialsMethod.CLIENT_CREDENTIALS) {
      this.oAuth2Client = new OAuth2Client(configuration, apiClient);
    } else {
      this.oAuth2Client = null;
    }

    var defaultHeaders = configuration.getDefaultHeaders();
    if (defaultHeaders != null) {
      apiClient.addRequestInterceptor(httpRequest -> defaultHeaders.forEach(httpRequest::setHeader));
    }

    Duration connectTimeout = configuration.getConnectTimeout();
    if (connectTimeout != null) {
      apiClient.setHttpClientBuilder(apiClient.getHttpClientBuilder().connectTimeout(connectTimeout));
    }
  }

  {{#operation}}
  {{#vendorExtensions.x-group-parameters}}
  {{#hasParams}}
  /**
   * {{summary}}
   * {{notes}}
   * @param apiRequest {@link API{{operationId}}Request}
   * @return {{#asyncNative}}CompletableFuture&lt;{{/asyncNative}}ApiResponse&lt;{{{returnType}}}{{^returnType}}Void{{/returnType}}&gt;{{#asyncNative}}&gt;{{/asyncNative}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#asyncNative}}CompletableFuture<{{/asyncNative}}ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}>{{#asyncNative}}>{{/asyncNative}} {{operationId}}(API{{operationId}}Request apiRequest) throws ApiException {
    {{#allParams}}
    {{{dataType}}} {{paramName}} = apiRequest.{{paramName}}();
    {{/allParams}}
    {{#returnType}}return {{/returnType}}{{^returnType}}{{#asyncNative}}return {{/asyncNative}}{{/returnType}}{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
  }

  {{/hasParams}}
  {{/vendorExtensions.x-group-parameters}}

  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
   {{/allParams}}
   * @return {{#asyncNative}}CompletableFuture&lt;{{/asyncNative}}ApiResponse&lt;{{{returnType}}}{{^returnType}}Void{{/returnType}}&gt;{{#asyncNative}}&gt;{{/asyncNative}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#asyncNative}}CompletableFuture<{{/asyncNative}}ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}>{{#asyncNative}}>{{/asyncNative}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException, FgaInvalidParameterException {
    return {{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}, this.configuration);
  }

  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
   {{/allParams}}
   * @param configurationOverride Override the {@link Configuration} this {{classname}} was constructed with
   * @return {{#asyncNative}}CompletableFuture&lt;{{/asyncNative}}ApiResponse&lt;{{{returnType}}}{{^returnType}}Void{{/returnType}}&gt;{{#asyncNative}}&gt;{{/asyncNative}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#asyncNative}}CompletableFuture<{{/asyncNative}}ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}>{{#asyncNative}}>{{/asyncNative}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}, ConfigurationOverride configurationOverride) throws ApiException, FgaInvalidParameterException {
    return {{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}, this.configuration.override(configurationOverride));
  }

  private {{#asyncNative}}CompletableFuture<{{/asyncNative}}ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}>{{#asyncNative}}>{{/asyncNative}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}, Configuration configuration) throws ApiException, FgaInvalidParameterException {

    {{#allParams}}{{#required}}
    assertParamExists({{paramName}}, "{{paramName}}", "{{operationId}}");
    {{/required}}{{/allParams}}

    String path = "{{{path}}}"{{#pathParams}}.replace({{=<% %>=}}"{<%baseName%>}"<%={{ }}=%>, StringUtil.urlEncode({{{paramName}}}.toString())){{/pathParams}};
    {{#hasQueryParams}}
    path = pathWithParams(path, {{#queryParams}}"{{baseName}}", {{paramName}}{{^-last}}, {{/-last}}{{/queryParams}});
    {{/hasQueryParams}}

    Map<String, Object> methodParameters = new HashMap<>();
    {{#allParams}}
    {{#required}}
    methodParameters.put("{{paramName}}", {{paramName}});
    {{/required}}
    {{/allParams}}

    Map<Attribute, String> telemetryAttributes = buildTelemetryAttributes(methodParameters);

    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_METHOD, "{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}");

    try {
      HttpRequest request = buildHttpRequest("{{httpMethod}}", path, {{#bodyParam}}{{paramName}}, {{/bodyParam}}configuration);
      return new HttpRequestAttempt<>(request, "{{operationId}}", {{{returnType}}}{{^returnType}}Void{{/returnType}}.class, apiClient, configuration)
        .addTelemetryAttributes(telemetryAttributes)
        .attemptHttpRequest();
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  {{/operation}}
  {{/operations}}

    private Map<Attribute, String> buildTelemetryAttributes(Map<String, Object> attributes) {
        Map<Attribute, String> telemetryAttributes = new HashMap<>();

        Object storeId = attributes.get("storeId");
        Object authorizationModelId = attributes.get("authorizationModelId");
        Object body = attributes.get("body");

        if (storeId != null) {
            telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_STORE_ID, storeId.toString());
        }

        if (authorizationModelId != null) {
            telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, authorizationModelId.toString());
        }

        if (body != null) {
            if (body instanceof CheckRequest) {
                CheckRequest checkRequest = (CheckRequest) body;

                if (checkRequest.getTupleKey() != null && !isNullOrWhitespace(checkRequest.getTupleKey().getUser())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_USER, checkRequest.getTupleKey().getUser());
                }

                if (!isNullOrWhitespace(checkRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, checkRequest.getAuthorizationModelId());
                }
            }

            if (body instanceof ExpandRequest) {
                ExpandRequest expandRequest = (ExpandRequest) body;

                if (!isNullOrWhitespace(expandRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, expandRequest.getAuthorizationModelId());
                }
            }

            if (body instanceof ListObjectsRequest) {
                ListObjectsRequest listObjectsRequest = (ListObjectsRequest) body;

                if (!isNullOrWhitespace(listObjectsRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, listObjectsRequest.getAuthorizationModelId());
                }
            }

            if (body instanceof ListUsersRequest) {
                ListUsersRequest listUsersRequest = (ListUsersRequest) body;

                if (!isNullOrWhitespace(listUsersRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, listUsersRequest.getAuthorizationModelId());
                }
            }

            if (body instanceof WriteRequest) {
                WriteRequest writeRequest = (WriteRequest) body;

                if (!isNullOrWhitespace(writeRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, writeRequest.getAuthorizationModelId());
                }
            }

            if (body instanceof BatchCheckRequest) {
                BatchCheckRequest batchCheckRequest = (BatchCheckRequest) body;

                if (!isNullOrWhitespace(batchCheckRequest.getAuthorizationModelId())) {
                    telemetryAttributes.put(
                            Attributes.FGA_CLIENT_REQUEST_MODEL_ID,
                            batchCheckRequest.getAuthorizationModelId());
                }

                if (batchCheckRequest.getChecks() != null) {
                    telemetryAttributes.put(
                            Attributes.FGA_CLIENT_REQUEST_BATCH_CHECK_SIZE,
                            String.valueOf(batchCheckRequest.getChecks().size()));
                }
            }
        }

        return telemetryAttributes;
    }

    private HttpRequest buildHttpRequest(String method, String path, Configuration configuration)
            throws ApiException, FgaInvalidParameterException {
        return buildHttpRequestWithPublisher(method, path, HttpRequest.BodyPublishers.noBody(), configuration);
    }

    private <T> HttpRequest buildHttpRequest(String method, String path, T body, Configuration configuration)
            throws ApiException, FgaInvalidParameterException {
        try {
            byte[] localVarPostBody = apiClient.getObjectMapper().writeValueAsBytes(body);
            var bodyPublisher = HttpRequest.BodyPublishers.ofByteArray(localVarPostBody);
            return buildHttpRequestWithPublisher(method, path, bodyPublisher, configuration);
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    private HttpRequest buildHttpRequestWithPublisher(
            String method, String path, HttpRequest.BodyPublisher bodyPublisher, Configuration configuration)
            throws ApiException, FgaInvalidParameterException {
        // verify the Configuration is valid
        configuration.assertValid();

        var httpRequest = HttpRequest.newBuilder();

        httpRequest.uri(URI.create(configuration.getApiUrl() + path));

        httpRequest.header("Content-Type", "application/json");
        httpRequest.header("Accept", "application/json");

        if (configuration.getCredentials().getCredentialsMethod() != CredentialsMethod.NONE) {
            String accessToken = getAccessToken(configuration);
            httpRequest.header("Authorization", "Bearer " + accessToken);
        }

        if (configuration.getUserAgent() != null) {
            httpRequest.header("User-Agent", configuration.getUserAgent());
        }

        if (configuration.getDefaultHeaders() != null) {
            configuration.getDefaultHeaders().forEach(httpRequest::header);
        }

        httpRequest.method(method, bodyPublisher);

        Duration readTimeout = configuration.getReadTimeout();
        if (readTimeout != null) {
            httpRequest.timeout(readTimeout);
        }
        if (apiClient.getRequestInterceptor() != null) {
            apiClient.getRequestInterceptor().accept(httpRequest);
        }

        return httpRequest.build();
    }

    private String pathWithParams(String basePath, Object... params) {
        var path = new StringBuilder().append(basePath);
        var paramStream = Stream.<String>builder();
        for (int i = 0; i < params.length - 1; i += 2) {
            if (params[i] == null || params[i + 1] == null) {
                continue;
            }
            Pair.of(params[i].toString(), params[i + 1].toString())
                    .map(Pair::asQueryStringPair)
                    .ifPresent(paramStream::add);
        }
        String parameters = paramStream.build().collect(Collectors.joining("&"));
        if (!isNullOrWhitespace(parameters)) {
            path.append("?").append(parameters);
        }
        return path.toString();
    }

  /**
    * Get an access token. Expects that configuration is valid (meaning it can
    * pass {@link Configuration#assertValid()}) and expects that if the
    * CredentialsMethod is CLIENT_CREDENTIALS that a valid {@link OAuth2Client}
    * has been initialized. Otherwise, it will throw an IllegalStateException.
    * @throws IllegalStateException when the configuration is invalid
    */
  private String getAccessToken(Configuration configuration) throws ApiException {
    CredentialsMethod credentialsMethod = configuration.getCredentials().getCredentialsMethod();

    if (credentialsMethod == CredentialsMethod.API_TOKEN) {
      return configuration.getCredentials().getApiToken().getToken();
    }

    if (credentialsMethod == CredentialsMethod.CLIENT_CREDENTIALS) {
      try {
        return oAuth2Client.getAccessToken().get();
      } catch (Exception e) {
        throw new ApiException(e);
      }
    }

    throw new IllegalStateException("Configuration is invalid.");
  }
}
