{{>licenseInfo}}

package dev.openfga.api;

import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import dev.openfga.api.invoker.ApiClient;
import dev.openfga.api.invoker.ApiException;
import dev.openfga.api.model.*;
import java.time.Duration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * API tests for OpenFgaApi
 */
public class OpenFgaApiTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    public static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";

    private final ObjectMapper mapper = new ObjectMapper();
    private OpenFgaApi fga;
    private ApiClient mockApiClient;
    private HttpClientMock mockHttpClient;

    @BeforeEach
    public void beforeEachTest() {
        mockHttpClient = new HttpClientMock();

        mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getBaseUri()).thenReturn("https://localhost");
        when(mockApiClient.getObjectMapper()).thenReturn(mapper);
        when(mockApiClient.getReadTimeout()).thenReturn(Duration.ofMillis(250));
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);

        fga = new OpenFgaApi(mockApiClient);
    }

    /**
     * Check whether a user is authorized to access an object.
     * <p>
     * The Check API queries to check if the user has a certain relationship with an object in a certain store. A &#x60;contextual_tuples&#x60; object may also be included in the body of the request. This object contains one field &#x60;tuple_keys&#x60;, which is an array of tuple keys. You may also provide an &#x60;authorization_model_id&#x60; in the body. This will be used to assert that the input &#x60;tuple_key&#x60; is valid for the model specified. If not specified, the assertion will be made against the latest authorization model ID. It is strongly recommended to specify authorization model id for better performance. The response will return whether the relationship exists in the field &#x60;allowed&#x60;.  ## Example In order to check if user &#x60;user:anne&#x60; of type &#x60;user&#x60; has a &#x60;reader&#x60; relationship with object &#x60;document:2021-budget&#x60; given the following contextual tuple &#x60;&#x60;&#x60;json {   \&quot;user\&quot;: \&quot;user:anne\&quot;,   \&quot;relation\&quot;: \&quot;member\&quot;,   \&quot;object\&quot;: \&quot;time_slot:office_hours\&quot; } &#x60;&#x60;&#x60; the Check API can be used with the following request body: &#x60;&#x60;&#x60;json {   \&quot;tuple_key\&quot;: {     \&quot;user\&quot;: \&quot;user:anne\&quot;,     \&quot;relation\&quot;: \&quot;reader\&quot;,     \&quot;object\&quot;: \&quot;document:2021-budget\&quot;   },   \&quot;contextual_tuples\&quot;: {     \&quot;tuple_keys\&quot;: [       {         \&quot;user\&quot;: \&quot;user:anne\&quot;,         \&quot;relation\&quot;: \&quot;member\&quot;,         \&quot;object\&quot;: \&quot;time_slot:office_hours\&quot;       }     ]   },   \&quot;authorization_model_id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot; } &#x60;&#x60;&#x60; OpenFGA&#39;s response will include &#x60;{ \&quot;allowed\&quot;: true }&#x60; if there is a relationship and &#x60;{ \&quot;allowed\&quot;: false }&#x60; if there isn&#39;t.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void check() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check")
                .doReturn(200, "{}");
        CheckRequest request = new CheckRequest()
                .tupleKey(new TupleKey())
                .contextualTuples(new ContextualTupleKeys())
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        CheckResponse _response = fga.check(DEFAULT_STORE_ID, request);

        // Then
        verify(mockApiClient).getBaseUri();
        verify(mockApiClient).getReadTimeout();
        String expectedBody = "{\"tuple_key\":{\"object\":null,\"relation\":null,\"user\":null},\"contextual_tuples\":{\"tuple_keys\":[]},\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null}";
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check")
                .withBody(is(expectedBody))
                .called(1);
    }

    @Test
    public void check_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.check(null, new CheckRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling check", exception.getMessage());
    }

    @Test
    public void check_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.check(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling check", exception.getMessage());
    }

    /**
     * Create a store.
     * <p>
     * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void createStoreTest() throws ApiException {
        CreateStoreResponse response = fga.createStore(null);

        // TODO: Write this
    }

    @Test
    public void createStore_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.createStore(null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling createStore", exception.getMessage());
    }

    /**
     * Delete a store.
     * <p>
     * Delete an OpenFGA store. This does not delete the data associated with the store, like tuples or authorization models.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void deleteStoreTest() throws ApiException {
        String storeId = null;

        fga.deleteStore(storeId);

        // TODO: test validations
    }

    @Test
    public void deleteStore_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.deleteStore(null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling deleteStore", exception.getMessage());
    }

    /**
     * Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship.
     * <p>
     * The Expand API will return all users and usersets that have certain relationship with an object in a certain store. This is different from the &#x60;/stores/{store_id}/read&#x60; API in that both users and computed usersets are returned. Body parameters &#x60;tuple_key.object&#x60; and &#x60;tuple_key.relation&#x60; are all required. The response will return a tree whose leaves are the specific users and usersets. Union, intersection and difference operator are located in the intermediate nodes.  ## Example To expand all users that have the &#x60;reader&#x60; relationship with object &#x60;document:2021-budget&#x60;, use the Expand API with the following request body &#x60;&#x60;&#x60;json {   \&quot;tuple_key\&quot;: {     \&quot;object\&quot;: \&quot;document:2021-budget\&quot;,     \&quot;relation\&quot;: \&quot;reader\&quot;   },   \&quot;authorization_model_id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot; } &#x60;&#x60;&#x60; OpenFGA&#39;s response will be a userset tree of the users and usersets that have read access to the document. &#x60;&#x60;&#x60;json {   \&quot;tree\&quot;:{     \&quot;root\&quot;:{       \&quot;type\&quot;:\&quot;document:2021-budget#reader\&quot;,       \&quot;union\&quot;:{         \&quot;nodes\&quot;:[           {             \&quot;type\&quot;:\&quot;document:2021-budget#reader\&quot;,             \&quot;leaf\&quot;:{               \&quot;users\&quot;:{                 \&quot;users\&quot;:[                   \&quot;user:bob\&quot;                 ]               }             }           },           {             \&quot;type\&quot;:\&quot;document:2021-budget#reader\&quot;,             \&quot;leaf\&quot;:{               \&quot;computed\&quot;:{                 \&quot;userset\&quot;:\&quot;document:2021-budget#writer\&quot;               }             }           }         ]       }     }   } } &#x60;&#x60;&#x60; The caller can then call expand API for the &#x60;writer&#x60; relationship for the &#x60;document:2021-budget&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void expandTest() throws ApiException {
        String storeId = null;
        ExpandRequest body = null;
        ExpandResponse response = fga.expand(storeId, body);

        // TODO: test validations
    }

    @Test
    public void expand_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.expand(null, new ExpandRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling expand", exception.getMessage());
    }

    @Test
    public void expand_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.expand(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling expand", exception.getMessage());
    }

    /**
     * Get a store.
     * <p>
     * Returns an OpenFGA store by its identifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void getStoreTest() throws ApiException {
        String storeId = null;
        GetStoreResponse response = fga.getStore(storeId);

        // TODO: test validations
    }

    @Test
    public void getStore_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.getStore(null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling getStore", exception.getMessage());
    }

    /**
     * List all objects of the given type that the user has a relation with.
     * <p>
     * The ListObjects API returns a list of all the objects of the given type that the user has a relation with. To achieve this, both the store tuples and the authorization model are used. An &#x60;authorization_model_id&#x60; may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance. You may also specify &#x60;contextual_tuples&#x60; that will be treated as regular tuples. The response will contain the related objects in an array in the \&quot;objects\&quot; field of the response and they will be strings in the object format &#x60;&lt;type&gt;:&lt;id&gt;&#x60; (e.g. \&quot;document:roadmap\&quot;). The number of objects in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_OBJECTS_MAX_RESULTS, whichever is hit first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void listObjectsTest() throws ApiException {
        String storeId = null;
        ListObjectsRequest body = null;
        ListObjectsResponse response = fga.listObjects(storeId, body);

        // TODO: test validations
    }

    @Test
    public void listObjects_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.listObjects(null, new ListObjectsRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling listObjects", exception.getMessage());
    }

    @Test
    public void listObjects_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.listObjects(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling listObjects", exception.getMessage());
    }

    /**
     * List all stores.
     * <p>
     * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void listStoresTest() throws ApiException {
        ListStoresResponse response = fga.listStores(null, null);

        // TODO: test validations
    }

    /**
     * Get tuples from the store that matches a query, without following userset rewrite rules.
     * <p>
     * The Read API will return the tuples for a certain store that match a query filter specified in the body of the request. It is different from the &#x60;/stores/{store_id}/expand&#x60; API in that it only returns relationship tuples that are stored in the system and satisfy the query.  In the body: 1. &#x60;tuple_key&#x60; is optional. If not specified, it will return all tuples in the store. 2. &#x60;tuple_key.object&#x60; is mandatory if &#x60;tuple_key&#x60; is specified. It can be a full object (e.g., &#x60;type:object_id&#x60;) or type only (e.g., &#x60;type:&#x60;). 3. &#x60;tuple_key.user&#x60; is mandatory if tuple_key is specified in the case the &#x60;tuple_key.object&#x60; is a type only. ## Examples ### Query for all objects in a type definition To query for all objects that &#x60;user:bob&#x60; has &#x60;reader&#x60; relationship in the &#x60;document&#x60; type definition, call read API with body of &#x60;&#x60;&#x60;json {  \&quot;tuple_key\&quot;: {      \&quot;user\&quot;: \&quot;user:bob\&quot;,      \&quot;relation\&quot;: \&quot;reader\&quot;,      \&quot;object\&quot;: \&quot;document:\&quot;   } } &#x60;&#x60;&#x60; The API will return tuples and a continuation token, something like &#x60;&#x60;&#x60;json {   \&quot;tuples\&quot;: [     {       \&quot;key\&quot;: {         \&quot;user\&quot;: \&quot;user:bob\&quot;,         \&quot;relation\&quot;: \&quot;reader\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       },       \&quot;timestamp\&quot;: \&quot;2021-10-06T15:32:11.128Z\&quot;     }   ],   \&quot;continuation_token\&quot;: \&quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ&#x3D;&#x3D;\&quot; } &#x60;&#x60;&#x60; This means that &#x60;user:bob&#x60; has a &#x60;reader&#x60; relationship with 1 document &#x60;document:2021-budget&#x60;. Note that this API, unlike the List Objects API, does not evaluate the tuples in the store. The continuation token will be empty if there are no more tuples to query.### Query for all stored relationship tuples that have a particular relation and object To query for all users that have &#x60;reader&#x60; relationship with &#x60;document:2021-budget&#x60;, call read API with body of  &#x60;&#x60;&#x60;json {   \&quot;tuple_key\&quot;: {      \&quot;object\&quot;: \&quot;document:2021-budget\&quot;,      \&quot;relation\&quot;: \&quot;reader\&quot;    } } &#x60;&#x60;&#x60; The API will return something like  &#x60;&#x60;&#x60;json {   \&quot;tuples\&quot;: [     {       \&quot;key\&quot;: {         \&quot;user\&quot;: \&quot;user:bob\&quot;,         \&quot;relation\&quot;: \&quot;reader\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       },       \&quot;timestamp\&quot;: \&quot;2021-10-06T15:32:11.128Z\&quot;     }   ],   \&quot;continuation_token\&quot;: \&quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ&#x3D;&#x3D;\&quot; } &#x60;&#x60;&#x60; This means that &#x60;document:2021-budget&#x60; has 1 &#x60;reader&#x60; (&#x60;user:bob&#x60;).  Note that, even if the model said that all &#x60;writers&#x60; are also &#x60;readers&#x60;, the API will not return writers such as &#x60;user:anne&#x60; because it only returns tuples and does not evaluate them. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with &#x60;document:2021-budget&#x60;, call read API with body of  &#x60;&#x60;&#x60;json {   \&quot;tuple_key\&quot;: {       \&quot;object\&quot;: \&quot;document:2021-budget\&quot;    } } &#x60;&#x60;&#x60; The API will return something like  &#x60;&#x60;&#x60;json {   \&quot;tuples\&quot;: [     {       \&quot;key\&quot;: {         \&quot;user\&quot;: \&quot;user:anne\&quot;,         \&quot;relation\&quot;: \&quot;writer\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       },       \&quot;timestamp\&quot;: \&quot;2021-10-05T13:42:12.356Z\&quot;     },     {       \&quot;key\&quot;: {         \&quot;user\&quot;: \&quot;user:bob\&quot;,         \&quot;relation\&quot;: \&quot;reader\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       },       \&quot;timestamp\&quot;: \&quot;2021-10-06T15:32:11.128Z\&quot;     }   ],   \&quot;continuation_token\&quot;: \&quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ&#x3D;&#x3D;\&quot; } &#x60;&#x60;&#x60; This means that &#x60;document:2021-budget&#x60; has 1 &#x60;reader&#x60; (&#x60;user:bob&#x60;) and 1 &#x60;writer&#x60; (&#x60;user:anne&#x60;).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void readTest() throws ApiException {
        String storeId = null;
        ReadRequest body = null;
        ReadResponse response = fga.read(storeId, body);

        // TODO: test validations
    }

    @Test
    public void read_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.read(null, new ReadRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling read", exception.getMessage());
    }

    @Test
    public void read_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.read(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling read", exception.getMessage());
    }

    /**
     * Read assertions for an authorization model ID.
     * <p>
     * The ReadAssertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void readAssertionsTest() throws ApiException {
        String storeId = null;
        String authorizationModelId = null;
        ReadAssertionsResponse response = fga.readAssertions(storeId, authorizationModelId);

        // TODO: test validations
    }

    @Test
    public void readAssertions_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAssertions(null, DEFAULT_AUTH_MODEL_ID));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling readAssertions", exception.getMessage());
    }

    @Test
    public void readAssertions_authModelIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, null));

        // Then
        assertEquals(
                "Missing the required parameter 'authorizationModelId' when calling readAssertions",
                exception.getMessage());
    }

    /**
     * Return a particular version of an authorization model.
     * <p>
     * The ReadAuthorizationModel API returns an authorization model by its identifier. The response will return the authorization model for the particular version.  ## Example To retrieve the authorization model with ID &#x60;01G5JAVJ41T49E9TT3SKVS7X1J&#x60; for the store, call the GET authorization-models by ID API with &#x60;01G5JAVJ41T49E9TT3SKVS7X1J&#x60; as the &#x60;id&#x60; path parameter.  The API will return: &#x60;&#x60;&#x60;json {   \&quot;authorization_model\&quot;:{     \&quot;id\&quot;:\&quot;01G5JAVJ41T49E9TT3SKVS7X1J\&quot;,     \&quot;type_definitions\&quot;:[       {         \&quot;type\&quot;:\&quot;user\&quot;       },       {         \&quot;type\&quot;:\&quot;document\&quot;,         \&quot;relations\&quot;:{           \&quot;reader\&quot;:{             \&quot;union\&quot;:{               \&quot;child\&quot;:[                 {                   \&quot;this\&quot;:{}                 },                 {                   \&quot;computedUserset\&quot;:{                     \&quot;object\&quot;:\&quot;\&quot;,                     \&quot;relation\&quot;:\&quot;writer\&quot;                   }                 }               ]             }           },           \&quot;writer\&quot;:{             \&quot;this\&quot;:{}           }         }       }     ]   } } &#x60;&#x60;&#x60; In the above example, there are 2 types (&#x60;user&#x60; and &#x60;document&#x60;). The &#x60;document&#x60; type has 2 relations (&#x60;writer&#x60; and &#x60;reader&#x60;).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void readAuthorizationModelTest() throws ApiException {
        String storeId = null;
        String id = null;
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel(storeId, id);

        // TODO: test validations
    }

    @Test
    public void readAuthorizationModel_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAuthorizationModel(null, DEFAULT_AUTH_MODEL_ID));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling readAuthorizationModel", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_idRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'id' when calling readAuthorizationModel", exception.getMessage());
    }

    /**
     * Return all the authorization models for a particular store.
     * <p>
     * The ReadAuthorizationModels API will return all the authorization models for a certain store. OpenFGA&#39;s response will contain an array of all authorization models, sorted in descending order of creation.  ## Example Assume that a store&#39;s authorization model has been configured twice. To get all the authorization models that have been created in this store, call GET authorization-models. The API will return a response that looks like: &#x60;&#x60;&#x60;json {   \&quot;authorization_models\&quot;: [     {       \&quot;id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot;,       \&quot;type_definitions\&quot;: [...]     },     {       \&quot;id\&quot;: \&quot;01G4ZW8F4A07AKQ8RHSVG9RW04\&quot;,       \&quot;type_definitions\&quot;: [...]     },   ],   \&quot;continuation_token\&quot;: \&quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ&#x3D;&#x3D;\&quot; } &#x60;&#x60;&#x60; If there are no more authorization models available, the &#x60;continuation_token&#x60; field will be empty &#x60;&#x60;&#x60;json {   \&quot;authorization_models\&quot;: [     {       \&quot;id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot;,       \&quot;type_definitions\&quot;: [...]     },     {       \&quot;id\&quot;: \&quot;01G4ZW8F4A07AKQ8RHSVG9RW04\&quot;,       \&quot;type_definitions\&quot;: [...]     },   ],   \&quot;continuation_token\&quot;: \&quot;\&quot; } &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void readAuthorizationModelsTest() throws ApiException {
        String storeId = null;
        Integer pageSize = null;
        String continuationToken = null;
        ReadAuthorizationModelsResponse response = fga.readAuthorizationModels(storeId, pageSize, continuationToken);

        // TODO: test validations
    }

    @Test
    public void readAuthorizationModels_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readAuthorizationModels(null, null, null));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling readAuthorizationModels",
                exception.getMessage());
    }

    /**
     * Return a list of all the tuple changes.
     * <p>
     * The ReadChanges API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty. You can use the &#x60;type&#x60; parameter to only get the list of tuple changes that affect objects of that type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void readChangesTest() throws ApiException {
        String storeId = null;
        String type = null;
        Integer pageSize = null;
        String continuationToken = null;
        ReadChangesResponse response = fga.readChanges(storeId, type, pageSize, continuationToken);

        // TODO: test validations
    }

    @Test
    public void readChanges_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readChanges(null, null, null, null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling readChanges", exception.getMessage());
    }

    /**
     * Add or delete tuples from the store.
     * <p>
     * The Write API will update the tuples for a certain store. Tuples and type definitions allow OpenFGA to determine whether a relationship exists between an object and an user. In the body, &#x60;writes&#x60; adds new tuples while &#x60;deletes&#x60; removes existing tuples. The API is not idempotent: if, later on, you try to add the same tuple, or if you try to delete a non-existing tuple, it will throw an error. An &#x60;authorization_model_id&#x60; may be specified in the body. If it is, it will be used to assert that each written tuple (not deleted) is valid for the model specified. If it is not specified, the latest authorization model ID will be used. ## Example ### Adding relationships To add &#x60;user:anne&#x60; as a &#x60;writer&#x60; for &#x60;document:2021-budget&#x60;, call write API with the following  &#x60;&#x60;&#x60;json {   \&quot;writes\&quot;: {     \&quot;tuple_keys\&quot;: [       {         \&quot;user\&quot;: \&quot;user:anne\&quot;,         \&quot;relation\&quot;: \&quot;writer\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       }     ]   },   \&quot;authorization_model_id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot; } &#x60;&#x60;&#x60; ### Removing relationships To remove &#x60;user:bob&#x60; as a &#x60;reader&#x60; for &#x60;document:2021-budget&#x60;, call write API with the following  &#x60;&#x60;&#x60;json {   \&quot;deletes\&quot;: {     \&quot;tuple_keys\&quot;: [       {         \&quot;user\&quot;: \&quot;user:bob\&quot;,         \&quot;relation\&quot;: \&quot;reader\&quot;,         \&quot;object\&quot;: \&quot;document:2021-budget\&quot;       }     ]   } } &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void writeTest() throws ApiException {
        String storeId = null;
        WriteRequest body = null;
        Object response = fga.write(storeId, body);

        // TODO: test validations
    }

    @Test
    public void write_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.write(null, new WriteRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling write", exception.getMessage());
    }

    @Test
    public void write_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.write(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling write", exception.getMessage());
    }

    /**
     * Upsert assertions for an authorization model ID.
     * <p>
     * The WriteAssertions API will upsert new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void writeAssertionsTest() throws ApiException {
        String storeId = null;
        String authorizationModelId = null;
        WriteAssertionsRequest body = null;

        fga.writeAssertions(storeId, authorizationModelId, body);

        // TODO: test validations
    }

    @Test
    public void writeAssertions_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class,
                () -> fga.writeAssertions(null, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling writeAssertions", exception.getMessage());
    }

    @Test
    public void writeAssertions_authModelIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAssertions(DEFAULT_STORE_ID, null, new WriteAssertionsRequest()));

        // Then
        assertEquals(
                "Missing the required parameter 'authorizationModelId' when calling writeAssertions",
                exception.getMessage());
    }

    @Test
    public void writeAssertions_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling writeAssertions", exception.getMessage());
    }

    /**
     * Create a new authorization model.
     * <p>
     * The WriteAuthorizationModel API will add a new authorization model to a store. Each item in the &#x60;type_definitions&#x60; array is a type definition as specified in the field &#x60;type_definition&#x60;. The response will return the authorization model&#39;s ID in the &#x60;id&#x60; field.  ## Example To add an authorization model with &#x60;user&#x60; and &#x60;document&#x60; type definitions, call POST authorization-models API with the body:  &#x60;&#x60;&#x60;json {   \&quot;type_definitions\&quot;:[     {       \&quot;type\&quot;:\&quot;user\&quot;     },     {       \&quot;type\&quot;:\&quot;document\&quot;,       \&quot;relations\&quot;:{         \&quot;reader\&quot;:{           \&quot;union\&quot;:{             \&quot;child\&quot;:[               {                 \&quot;this\&quot;:{}               },               {                 \&quot;computedUserset\&quot;:{                   \&quot;object\&quot;:\&quot;\&quot;,                   \&quot;relation\&quot;:\&quot;writer\&quot;                 }               }             ]           }         },         \&quot;writer\&quot;:{           \&quot;this\&quot;:{}         }       }     }   ] } &#x60;&#x60;&#x60; OpenFGA&#39;s response will include the version id for this authorization model, which will look like  &#x60;&#x60;&#x60; {\&quot;authorization_model_id\&quot;: \&quot;01G50QVV17PECNVAHX1GG4Y5NC\&quot;} &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled
    public void writeAuthorizationModelTest() throws ApiException {
        String storeId = null;
        WriteAuthorizationModelRequest body = null;
        WriteAuthorizationModelResponse response = fga.writeAuthorizationModel(storeId, body);

        // TODO: test validations
    }

    @Test
    public void writeAuthorizationModel_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAuthorizationModel(null, new WriteAuthorizationModelRequest()));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling writeAuthorizationModel",
                exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_bodyRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.writeAuthorizationModel(DEFAULT_STORE_ID, null));

        // Then
        assertEquals(
                "Missing the required parameter 'body' when calling writeAuthorizationModel", exception.getMessage());
    }
}
