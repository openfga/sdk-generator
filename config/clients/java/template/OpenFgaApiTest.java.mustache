{{>licenseInfo}}

package dev.openfga.api;

import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import dev.openfga.api.invoker.ApiClient;
import dev.openfga.api.invoker.ApiException;
import dev.openfga.api.model.*;
import java.time.Duration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * API tests for OpenFgaApi
 */
public class OpenFgaApiTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    public static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";

    private final ObjectMapper mapper = new ObjectMapper();
    private OpenFgaApi fga;
    private ApiClient mockApiClient;
    private HttpClientMock mockHttpClient;

    @BeforeEach
    public void beforeEachTest() {
        mockHttpClient = new HttpClientMock();

        mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getBaseUri()).thenReturn("https://localhost");
        when(mockApiClient.getObjectMapper()).thenReturn(mapper);
        when(mockApiClient.getReadTimeout()).thenReturn(Duration.ofMillis(250));
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);

        fga = new OpenFgaApi(mockApiClient);
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void check() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check")
                .doReturn(200, "{}");
        CheckRequest request = new CheckRequest()
                .tupleKey(new TupleKey())
                .contextualTuples(new ContextualTupleKeys())
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        CheckResponse _response = fga.check(DEFAULT_STORE_ID, request);

        // Then
        verify(mockApiClient).getBaseUri();
        verify(mockApiClient).getReadTimeout();
        String expectedBody =
                "{\"tuple_key\":{\"object\":null,\"relation\":null,\"user\":null},\"contextual_tuples\":{\"tuple_keys\":[]},\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null}";
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check")
                .withBody(is(expectedBody))
                .called(1);
    }

    @Test
    public void check_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.check(null, new CheckRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling check", exception.getMessage());
    }

    @Test
    public void check_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.check(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling check", exception.getMessage());
    }

    /**
     * Create a store.
     */
    @Test
    public void createStoreTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores")
                .doReturn(200, "{}");

        // When
        CreateStoreResponse _response = fga.createStore(new CreateStoreRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores")
                .called(1);
    }

    @Test
    public void createStore_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.createStore(null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling createStore", exception.getMessage());
    }

    /**
     * Delete a store.
     */
    @Test
    public void deleteStoreTest() throws ApiException {
        // Given
        mockHttpClient
                .onDelete("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X")
                .doReturn(200, "{}");

        // When
        fga.deleteStore(DEFAULT_STORE_ID);

        // Then
        mockHttpClient
                .verify()
                .delete("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X")
                .called(1);
    }

    @Test
    public void deleteStore_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.deleteStore(null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling deleteStore", exception.getMessage());
    }

    /**
     * Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship.
     */
    @Test
    public void expandTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand")
                .doReturn(200, "{}");

        // When
        ExpandResponse _response = fga.expand(DEFAULT_STORE_ID, new ExpandRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand")
                .called(1);
    }

    @Test
    public void expand_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.expand(null, new ExpandRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling expand", exception.getMessage());
    }

    @Test
    public void expand_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.expand(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling expand", exception.getMessage());
    }

    /**
     * Get a store.
     */
    @Test
    public void getStoreTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X")
                .doReturn(200, "{}");

        // When
        GetStoreResponse _response = fga.getStore(DEFAULT_STORE_ID);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X")
                .called(1);
    }

    @Test
    public void getStore_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.getStore(null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling getStore", exception.getMessage());
    }

    /**
     * List all objects of the given type that the user has a relation with.
     */
    @Test
    public void listObjectsTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects")
                .doReturn(200, "{}");

        // When
        ListObjectsResponse _response = fga.listObjects(DEFAULT_STORE_ID, new ListObjectsRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects")
                .called(1);
    }

    @Test
    public void listObjects_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.listObjects(null, new ListObjectsRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling listObjects", exception.getMessage());
    }

    @Test
    public void listObjects_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.listObjects(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling listObjects", exception.getMessage());
    }

    /**
     * List all stores.
     */
    @Test
    public void listStoresTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores")
                .doReturn(200, "{}");

        // When
        ListStoresResponse _response = fga.listStores(null, null);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores")
                .called(1);
    }

    /**
     * Get tuples from the store that matches a query, without following userset rewrite rules.
     */
    @Test
    public void readTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read")
                .doReturn(200, "{}");

        // When
        ReadResponse _response = fga.read(DEFAULT_STORE_ID, new ReadRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read")
                .called(1);
    }

    @Test
    public void read_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.read(null, new ReadRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling read", exception.getMessage());
    }

    @Test
    public void read_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.read(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling read", exception.getMessage());
    }

    /**
     * Read assertions for an authorization model ID.
     */
    @Test
    public void readAssertionsTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J")
                .doReturn(200, "{}");

        // When
        ReadAssertionsResponse _response = fga.readAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J")
                .called(1);
    }

    @Test
    public void readAssertions_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAssertions(null, DEFAULT_AUTH_MODEL_ID));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling readAssertions", exception.getMessage());
    }

    @Test
    public void readAssertions_authModelIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, null));

        // Then
        assertEquals(
                "Missing the required parameter 'authorizationModelId' when calling readAssertions",
                exception.getMessage());
    }

    /**
     * Return a particular version of an authorization model.
     */
    @Test
    public void readAuthorizationModelTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J")
                .doReturn(200, "{}");

        // When
        ReadAuthorizationModelResponse _response = fga.readAuthorizationModel(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J")
                .called(1);
    }

    @Test
    public void readAuthorizationModel_storeIdRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAuthorizationModel(null, DEFAULT_AUTH_MODEL_ID));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling readAuthorizationModel", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_idRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'id' when calling readAuthorizationModel", exception.getMessage());
    }

    /**
     * Return all the authorization models for a particular store.
     */
    @Test
    public void readAuthorizationModelsTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models")
                .doReturn(200, "{}");

        // When
        ReadAuthorizationModelsResponse _response = fga.readAuthorizationModels(DEFAULT_STORE_ID, null, null);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models")
                .called(1);
    }

    @Test
    public void readAuthorizationModels_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readAuthorizationModels(null, null, null));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling readAuthorizationModels",
                exception.getMessage());
    }

    /**
     * Return a list of all the tuple changes.
     */
    @Test
    public void readChangesTest() throws ApiException {
        // Given
        mockHttpClient
                .onGet("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes")
                .doReturn(200, "{}");

        // When
        ReadChangesResponse _response = fga.readChanges(DEFAULT_STORE_ID, null, null, null);

        // Then
        mockHttpClient
                .verify()
                .get("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes")
                .called(1);
    }

    @Test
    public void readChanges_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.readChanges(null, null, null, null));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling readChanges", exception.getMessage());
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write")
                .doReturn(200, "{}");

        // When
        fga.write(DEFAULT_STORE_ID, new WriteRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write")
                .called(1);
    }

    @Test
    public void write_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.write(null, new WriteRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling write", exception.getMessage());
    }

    @Test
    public void write_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(ApiException.class, () -> fga.write(DEFAULT_STORE_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling write", exception.getMessage());
    }

    /**
     * Upsert assertions for an authorization model ID.
     */
    @Test
    public void writeAssertionsTest() throws ApiException {
        // Given
        mockHttpClient
                .onPut("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J")
                .doReturn(200, "{}");

        // When
        fga.writeAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest());

        // Then
        mockHttpClient
                .verify()
                .put("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J")
                .called(1);
    }

    @Test
    public void writeAssertions_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class,
                () -> fga.writeAssertions(null, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest()));

        // Then
        assertEquals("Missing the required parameter 'storeId' when calling writeAssertions", exception.getMessage());
    }

    @Test
    public void writeAssertions_authModelIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAssertions(DEFAULT_STORE_ID, null, new WriteAssertionsRequest()));

        // Then
        assertEquals(
                "Missing the required parameter 'authorizationModelId' when calling writeAssertions",
                exception.getMessage());
    }

    @Test
    public void writeAssertions_bodyRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, null));

        // Then
        assertEquals("Missing the required parameter 'body' when calling writeAssertions", exception.getMessage());
    }

    /**
     * Create a new authorization model.
     */
    @Test
    public void writeAuthorizationModelTest() throws ApiException {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models")
                .doReturn(200, "{}");

        // When
        WriteAuthorizationModelResponse _response = fga.writeAuthorizationModel(DEFAULT_STORE_ID, new WriteAuthorizationModelRequest());

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models")
                .called(1);
    }

    @Test
    public void writeAuthorizationModel_storeIdRequired() throws ApiException {
        // When
        ApiException exception = assertThrows(
                ApiException.class, () -> fga.writeAuthorizationModel(null, new WriteAuthorizationModelRequest()));

        // Then
        assertEquals(
                "Missing the required parameter 'storeId' when calling writeAuthorizationModel",
                exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_bodyRequired() throws ApiException {
        // When
        ApiException exception =
                assertThrows(ApiException.class, () -> fga.writeAuthorizationModel(DEFAULT_STORE_ID, null));

        // Then
        assertEquals(
                "Missing the required parameter 'body' when calling writeAuthorizationModel", exception.getMessage());
    }
}
