/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.api;

import static org.junit.jupiter.api.Assertions.*;

import dev.openfga.api.invoker.*;
import dev.openfga.api.model.*;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class OpenFgaApiIntegrationTest {
    OpenFgaApi api;

    @BeforeEach
    public void initializeApi() {
        ApiClient apiClient = new ApiClient().setHost("localhost").setPort(8080);
        api = new OpenFgaApi(apiClient);
    }

    @Test
    public void createStore() throws ApiException {
        // Given
        String storeName = thisTestName();
        CreateStoreRequest createStoreRequest = new CreateStoreRequest().name(storeName);

        // When
        CreateStoreResponse response = api.createStore(createStoreRequest);

        // Then
        assertEquals("dev.openfga.api.OpenFgaApiIntegrationTest.createStore", response.getName());
    }

    @Test
    public void deleteStore() throws ApiException {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);

        // When
        api.deleteStore(storeId);

        // Then
        ListStoresResponse response = api.listStores(100, null);
        boolean itWasDeleted = response.getStores().stream().map(Store::getName).noneMatch(storeName::equals);
        assertTrue(itWasDeleted, String.format("No stores should remain with the name %s.", storeName));
    }

    @Test
    public void listStores() throws ApiException {
        // Given
        String testName = thisTestName();
        String store1 = testName + "-store1";
        String store2 = testName + "-store2";
        String store3 = testName + "-store3";
        List<String> stores = List.of(store1, store2, store3);
        for (String store : stores) {
            createStore(store);
        }

        // When
        ListStoresResponse response = api.listStores(100, null);

        // Then
        for (String store : stores) {
            boolean exists = response.getStores().stream().map(Store::getName).anyMatch(store::equals);
            assertTrue(exists, String.format("Store %s should be in listStores response", store));
        }
    }

    @Test
    public void getStore() throws ApiException {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);

        // When
        GetStoreResponse response = api.getStore(storeId);

        // Then
        assertEquals(storeName, response.getName());
    }

    /*
       TODO:
       * check
       * expand
       * listObjects
       * read
       * readAssertions
       * readAuthorizationModel
       * readAuthorizationModels
       * readChanges
       * write
       * writeAssertions
       * writeAuthorizationModel
       * WriteAuthorizationModels
    */

    /**
     * Create a store for a given name. If tests fail here, troubleshoot with the no-arguments @Test createStore()
     * method.
     */
    private String createStore(String storeName) throws ApiException {
        CreateStoreResponse response = api.createStore(new CreateStoreRequest().name(storeName));
        return response.getId();
    }

    /** Get the name of the test that invokes this function. Returned in the form: "$class.$fn" */
    private String thisTestName() {
        // Tracing the stack gives an array of:
        // 0: getStackTrace(), 1: getThisFunctionName(), 2: <The calling function>, 3: ...
        StackTraceElement callingFn = Thread.currentThread().getStackTrace()[2];

        return String.format("%s.%s", callingFn.getClassName(), callingFn.getMethodName());
    }
}
