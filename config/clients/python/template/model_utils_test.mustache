{{>partial_header}}

import unittest
import json

import {{packageName}}
from {{packageName}}.model.type_definition import TypeDefinition
from {{packageName}}.model.type_definitions import TypeDefinitions
from {{packageName}}.model.object_relation import ObjectRelation
from {{packageName}}.model.userset import Userset
from {{packageName}}.model.usersets import Usersets

class ModelUtilsTest(unittest.TestCase):
    """Testing model utils"""

    def setUp(self):
        self.configuration = {{packageName}}.Configuration(
            api_scheme = 'http',
            api_host = "api.{{sampleApiDomain}}",
        )

    def tearDown(self):
        pass

    def test_validate_and_convert_types(self):
        """
        Test the validate and covert type functionality
        """
        input = '{"type_definitions":[{"type":"document","relations":{"writer":{"this":{}},"reader":{"union":{"child":[{"this":{}},{"computedUserset":{"object":"","relation":"writer"}}]}}}}]}'
        expected_object = TypeDefinitions(
            type_definitions=[
                TypeDefinition(
                    type="document",
                    relations=dict(
		        		writer=Userset(
                            this=dict(),
                        ),
                        reader=Userset(
                            union=Usersets(
                                child=[
                                    Userset(this=dict()),
                                    Userset(computed_userset=ObjectRelation(
                                        object="",
                                        relation="writer",
                                    )),
                                ],
                            ),
                        ),
	                )
                ),
            ],
        )
        converted_object = {{packageName}}.model_utils.validate_and_convert_types(
            json.loads(input),
            ({{packageName}}.model.type_definitions.TypeDefinitions,),
            ['{{packageName}}.model.type_definitions.TypeDefinitions'],
            True,
            True,
            configuration=self.configuration
        )
		self.assertIsInstance(converted_object, TypeDefinitions)
        self.assertEqual(converted_object, expected_object)