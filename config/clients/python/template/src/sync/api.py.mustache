{{>partial_header}}

from {{packageName}}.exceptions import ApiValueError, FgaValidationException
from {{packageName}}.sync.api_client import ApiClient
from {{packageName}}.sync.oauth2 import OAuth2Client
from {{packageName}}.telemetry import Telemetry
from {{packageName}}.telemetry.attributes import TelemetryAttribute, TelemetryAttributes


{{#operations}}
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client: ApiClient = api_client

        self._oauth2_client = None
        if api_client.configuration is not None:
            credentials = api_client.configuration.credentials
            if credentials is not None and credentials.method == "client_credentials":
                self._oauth2_client = OAuth2Client(credentials)

        self._telemetry = Telemetry()


    def __enter__(self):
        return self

    def __exit__(self):
        self.close()

    def close(self):
        self.api_client.close()

{{#operation}}

    def {{operationId}}(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{^-first}}{{paramName}}, {{/-first}}{{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs):
        """{{{summary}}}{{^summary}}{{operationId}}{{/summary}}

{{#notes}}
        {{{.}}}
{{/notes}}

{{#sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}({{#allParams}}{{#required}}{{^-first}}{{paramName}}{{^-last}}, {{/-last}}{{/-first}}{{/required}}{{/allParams}})
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}({{#allParams}}{{#required}}{{^-first}}{{paramName}}={{paramName}}_value{{^-last}}, {{/-last}} {{/-first}}{{/required}}{{/allParams}})
{{/sortParamsByRequiredFlag}}

{{#requiredParams}}
{{^-first}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}} (required)
        :type {{paramName}}: {{dataType}}
{{/-first}}
{{/requiredParams}}
{{#optionalParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}(optional)
        :type {{paramName}}: {{dataType}}, optional
{{/optionalParams}}
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param headers: additional headers to include in the request
        :type headers: Dict[str, str], optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: {{returnType}}{{^returnType}}None{{/returnType}}
        """
        kwargs["_return_http_data_only"] = True
        return self.{{operationId}}_with_http_info({{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{^-first}}{{paramName}}, {{/-first}}{{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs)

    def {{operationId}}_with_http_info(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{^-first}}{{paramName}}, {{/-first}}{{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs):
        """{{{summary}}}{{^summary}}{{operationId}}{{/summary}}

{{#notes}}
        {{{.}}}
{{/notes}}

{{#sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}_with_http_info({{#allParams}}{{#required}}{{^-first}}{{paramName}}{{^-last}}, {{/-last}}{{/-first}}{{/required}}{{/allParams}})
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}_with_http_info({{#allParams}}{{#required}}{{^-first}}{{paramName}}={{paramName}}_value{{^-last}}, {{/-last}} {{/-first}}{{/required}}{{/allParams}})
{{/sortParamsByRequiredFlag}}

{{#requiredParams}}
{{^-first}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}} (required)
        :type {{paramName}}: {{dataType}}
{{/-first}}
{{/requiredParams}}
{{#optionalParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}(optional)
        :type {{paramName}}: {{dataType}}, optional
{{/optionalParams}}
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :param _retry_param: if specified, override the retry parameters specified in configuration
        :param headers: additional headers to include in the request
        :type _request_auth: dict, optional
        :type headers: Dict[str, str], optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: {{#returnType}}tuple({{.}}, status_code(int), headers(HTTPHeaderDict)){{/returnType}}{{^returnType}}None{{/returnType}}
        """

        {{#servers.0}}
        local_var_hosts = [
{{#servers}}
            '{{{url}}}'{{^-last}},{{/-last}}
{{/servers}}
        ]
        local_var_host = local_var_hosts[0]
        if kwargs.get('_host_index'):
            _host_index = int(kwargs.get('_host_index'))
            if _host_index < 0 or _host_index >= len(local_var_hosts):
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s"
                    % len(local_var_host)
                )
            local_var_host = local_var_hosts[_host_index]
        {{/servers.0}}
        local_var_params = locals()

        all_params = [
{{#requiredParams}}{{^-first}}
            '{{paramName}}'{{^-last}},{{/-last}}
{{/-first}}{{/requiredParams}}
{{#optionalParams}}
            '{{paramName}}'{{^-last}},{{/-last}}
{{/optionalParams}}
        ]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "headers",
                "_headers",
                "_retry_params",
                "_streaming",
            ]
        )

        for key, val in local_var_params['kwargs'].items():
            if key not in all_params{{#servers.0}} and key != "_host_index"{{/servers.0}}:
                raise FgaValidationException(
                    f"Got an unexpected keyword argument '{key}' to method {{operationId}}"
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
{{#allParams}}
{{^isNullable}}
{{#required}}
{{^-first}}
        # verify the required parameter '{{paramName}}' is set
        if self.api_client.client_side_validation and local_var_params.get('{{paramName}}') is None:
            raise ApiValueError(
                "Missing the required parameter `{{paramName}}` when calling `{{operationId}}`")
{{/-first}}
{{/required}}
{{/isNullable}}
{{/allParams}}

{{#allParams}}
{{#-last}}
{{/-last}}
{{/allParams}}
        collection_formats = {}

        path_params = {}

        store_id = None
{{#pathParams}}
{{^-first}}
        if '{{paramName}}' in local_var_params:
            path_params['{{baseName}}'] = local_var_params['{{paramName}}']{{#isArray}}
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isArray}}
{{/-first}}

{{#-first}}
        if self.api_client._get_store_id() is None:
            raise ApiValueError("Store ID expected in api_client's configuration when calling `{{operationId}}`")
        store_id = self.api_client._get_store_id()
{{/-first}}

{{/pathParams}}

        query_params = []
{{#queryParams}}
        if local_var_params.get('{{paramName}}') is not None:
            query_params.append(
                ('{{baseName}}', local_var_params['{{paramName}}'])){{#isArray}}
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isArray}}
{{/queryParams}}

        header_params = dict(local_var_params.get("headers", {}))
        header_params.update(local_var_params.get('_headers', {}))
{{#headerParams}}
        if '{{paramName}}' in local_var_params:
            header_params['{{baseName}}'] = local_var_params['{{paramName}}']{{#isArray}}
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isArray}}
{{/headerParams}}

        form_params = []
        local_var_files = {}
{{#formParams}}
        if '{{paramName}}' in local_var_params:
            {{^isFile}}form_params.append(('{{baseName}}', local_var_params['{{paramName}}'])){{/isFile}}{{#isFile}}local_var_files['{{baseName}}'] = local_var_params['{{paramName}}']{{/isFile}}{{#isArray}}
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isArray}}
{{/formParams}}

        body_params = None
{{#bodyParam}}
        if '{{paramName}}' in local_var_params:
            body_params = local_var_params['{{paramName}}']
{{/bodyParam}}
        {{#hasProduces}}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}])

        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type', self.api_client.select_header_content_type([{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}],'{{httpMethod}}', body_params))
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        {{/hasConsumes}}
        # Authentication setting
        auth_settings = [{{#authMethods}}'{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}]

        {{#returnType}}
        {{#responses}}
        {{#-first}}
        response_types_map = {
        {{/-first}}
            {{^isWildcard}}
            {{code}}: {{#dataType}}"{{.}}"{{/dataType}}{{^dataType}}None{{/dataType}},
            {{/isWildcard}}
        {{#-last}}
        }
        {{/-last}}
        {{/responses}}
        {{/returnType}}
        {{^returnType}}
        response_types_map = {}
        {{/returnType}}

        telemetry_attributes: dict[TelemetryAttribute, str | bool | int | float] = {
            TelemetryAttributes.fga_client_request_method: "{{operationId}}",
            TelemetryAttributes.fga_client_request_store_id: self.api_client.get_store_id(),
            TelemetryAttributes.fga_client_request_model_id: local_var_params.get(
                "authorization_model_id", ""
            ),
        }

        telemetry_attributes = TelemetryAttributes.fromBody(
            body=body_params,
            attributes=telemetry_attributes,
        )

        return self.api_client.call_api(
            '{{{path}}}'.replace('{store_id}', store_id), '{{httpMethod}}',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            _retry_params=local_var_params.get('_retry_params'),
            {{#servers.0}}
            _host=local_var_host,
            {{/servers.0}}
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'),
            _oauth2_client=self._oauth2_client,
            _telemetry_attributes=telemetry_attributes,
            _streaming=local_var_params.get("_streaming", False),
        )
{{/operation}}
{{/operations}}
