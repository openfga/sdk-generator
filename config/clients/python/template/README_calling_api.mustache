#### List Stores

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/ListStores)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Get all stores
response = api_instance.list_stores()
# response = ListStoreResponse(...)
# response.stores = [Store({"id": "01FQH7V8BEG3GPQW93KTRFR8JB", "name": "FGA Demo Store", "created_at": "2022-01-01T00:00:00.000Z", "updated_at": "2022-01-01T00:00:00.000Z"})]

```

#### Create Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/CreateStore)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Create a store
body = CreateStoreRequest(
    name = "FGA Demo Store",
)
response = api_instance.create_store(body)
# response.id = "01FQH7V8BEG3GPQW93KTRFR8JB"
```


#### Get Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/GetStore)

> Requires a client initialized with a storeId

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Get a store
response = api_instance.get_store()
# response = Store({"id": "01FQH7V8BEG3GPQW93KTRFR8JB", "name": "FGA Demo Store", "created_at": "2022-01-01T00:00:00.000Z", "updated_at": "2022-01-01T00:00:00.000Z"})
```


#### Delete Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/DeleteStore)

> Requires a client initialized with a storeId

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Delete a store
api_instance.delete_store()
```

#### Write Authorization Model

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/WriteAuthorizationModel)

> Requires a client initialized with a storeId

> Note: To learn how to build your authorization model, check the Docs at {{docsUrl}}.

> Learn more about [the {{appName}} configuration language]({{docsUrl}}/configuration-language).

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
type_definitions = TypeDefinitions(
    type_definitions=[
        TypeDefinition(
            type="document",
            relations=dict(
                writer=Userset(
                    this=dict(),
                ),
                viewer=Userset(
                    union=Usersets(
                        child=[
                            Userset(this=dict()),
                            Userset(computed_userset=ObjectRelation(
                                object="",
                                relation="writer",
                            )),
                        ],
                    ),
                ),
            )
        ),
    ],
)

# Create a new authorization model
response = api_instance.write_authorization_model(type_definitions)
# response.id = "1uHxCSuTP0VKPYSnkq1pbb1jeZw"
```


#### Read a Single Authorization Model

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/ReadAuthorizationModel)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
id = "1uHxCSuTP0VKPYSnkq1pbb1jeZw" #  Assuming `1uHxCSuTP0VKPYSnkq1pbb1jeZw` is an id of an existing model

# Return a particular version of an authorization model
response = api_instance.read_authorization_model(id)
# response.authorization_model =  AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...])
```

#### Read Authorization Model IDs

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/ReadAuthorizationModels)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Return all the authorization models for a particular store
response = api_instance.read_authorization_models()
# response.authorization_models = [AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...], AuthorizationModel(id='GtQpMohWezFmIbyXxVEocOCxxgq', type_definitions=type_definitions[...])]
```


#### Check

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/Check)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
body = CheckRequest(
    tuple_key=TupleKey(
        user="81684243-9356-4421-8fbf-a4f8d36aa31b",
        relation="admin",
        object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
    ),
)

# Check whether a user is authorized to access an object
response = api_instance.check(body)
# response.allowed = True
```


#### Write Tuples

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Write)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
body = WriteRequest(
    writes=TupleKeys(
        tuple_keys=[
            TupleKey(
                user="81684243-9356-4421-8fbf-a4f8d36aa31b",
                relation="admin",
                object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
            ),
        ],
    ),
)

# Add tuples from the store
response = api_instance.write(body)
```

#### Delete Tuples

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Write)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
body = WriteRequest(
    deletes=TupleKeys(
        tuple_keys=[
            TupleKey(
                user="81684243-9356-4421-8fbf-a4f8d36aa31b",
                relation="reader",
                object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
            ),
        ],
    ),
) 

# Delete tuples from the store
response = api_instance.write(body)
```

#### Expand

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/Expand)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
body = ExpandRequest(
    tuple_key=TupleKey(
        relation="admin",
        object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
    ),
)

# Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
response = api_instance.expand(body)
# response = ExpandResponse({"tree": UsersetTree({"root": Node({"name": "workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6#admin", "leaf": Leaf({"users": Users({"users": ["anne", "beth"]})})})})})
```

#### Read Changes

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Read)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))

# Find if a relationship tuple stating that a certain user is an admin on a certain workspace
body = ReadRequest(
    tuple_key=TupleKey(
        user="81684243-9356-4421-8fbf-a4f8d36aa31b",
        relation="admin",
        object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
    ),
) 

# Find all relationship tuples where a certain user has a relationship as any relation to a certain workspace
body = ReadRequest(
    tuple_key=TupleKey(
        user="81684243-9356-4421-8fbf-a4f8d36aa31b",
        object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
    ),
) 

# Find all relationship tuples where a certain user is an admin on any workspace
body = ReadRequest(
    tuple_key=TupleKey(
        user="81684243-9356-4421-8fbf-a4f8d36aa31b",
        relation="admin",
        object="workspace:",
    ),
)

# Find all relationship tuples where any user has a relationship as any relation with a particular workspace
body = ReadRequest(
    tuple_key=TupleKey(
        object="workspace:675bcac4-ad38-4fb1-a19a-94a5648c91d6",
    ),
)

response = api_instance.read(body)
# response = ReadResponse({"tuples": [Tuple({"key": TupleKey({"user":"...","relation":"...","object":"..."}), "timestamp": datetime.fromisoformat("...") })]})
```

#### Read Changes (Watch)

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/ReadChanges)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)


# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
type = "workspace"
page_size = 25
continuation_token = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="

# Return a list of all the tuple changes
response = api_instance.read_changes(type=type, page_size=page_size, continuation_token=continuation_token)
# response.continuation_token = ...
# response.changes = [TupleChange(tuple_key=TupleKey(object="...",relation="...",user="..."),operation=TupleOperation("TUPLE_OPERATION_WRITE"),timestamp=datetime.fromisoformat("..."))]
```

#### List Objects

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/ListObjects)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create an instance of the API class
api_instance = open_fga_api.OpenFgaApi(openfga_sdk.ApiClient(configuration))
body = ListObjectsRequest(
    authorization_model_id="01GAHCE4YVKPQEKZQHT2R89MQV",
    user="anne",
    relation="can_read",
    type="document",
    contextual_tuples=ContextualTupleKeys( # optional
        tuple_keys=[
            TupleKey(
                user="anne",
                relation="editor",
                object="folder:product",
            ),
            TupleKey(
                user="folder:product",
                relation="parent",
                object="document:roadmap",
            ),
        ],
    ),
)

# ListObjects lists all of the object ids for objects of the provided type that the given user has a specific relation with.
response = api_instance.list_objects(body)
# response.object_ids = ["roadmap"]
```
