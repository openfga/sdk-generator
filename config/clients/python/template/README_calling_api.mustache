#### List Stores

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/ListStores)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
)

# Get all stores
async def list_stores():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    response = await api_instance.list_stores()
    # response = ListStoreResponse(...)
    # response.stores = [Store({"id": "01FQH7V8BEG3GPQW93KTRFR8JB", "name": "FGA Demo Store", "created_at": "2022-01-01T00:00:00.000Z", "updated_at": "2022-01-01T00:00:00.000Z"})]
    await api_client.close()
```

#### Create Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/CreateStore)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
)

# Create a store
async def create_store():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    body = CreateStoreRequest(
        name = "FGA Demo Store",
    )
    response = await api_instance.create_store(body)
    # response.id = "01FQH7V8BEG3GPQW93KTRFR8JB"
    await api_client.close()
```


#### Get Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/GetStore)

> Requires a client initialized with a storeId

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Get a store
async def get_store():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    response = await api_instance.get_store()
    # response = Store({"id": "01FQH7V8BEG3GPQW93KTRFR8JB", "name": "FGA Demo Store", "created_at": "2022-01-01T00:00:00.000Z", "updated_at": "2022-01-01T00:00:00.000Z"})
    await api_client.close()
```


#### Delete Store

[API Documentation]({{apiDocsUrl}}/docs/api#/Stores/DeleteStore)

> Requires a client initialized with a storeId

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Delete a store
async def delete_store():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    await api_instance.delete_store()
    await api_client.close()
```

#### Write Authorization Model

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/WriteAuthorizationModel)

> Requires a client initialized with a storeId

> Note: To learn how to build your authorization model, check the Docs at {{docsUrl}}.

> Learn more about [the {{appName}} configuration language]({{docsUrl}}/configuration-language).

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Create a new authorization model
async def write_authorization_model():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    type_definitions = WriteAuthorizationModelRequest(
        type_definitions=[
            TypeDefinition(
                type="user",
            ),
            TypeDefinition(
                type="document",
                relations=dict(
                    writer=Userset(
                        this=dict(),
                    ),
                    viewer=Userset(
                        union=Usersets(
                            child=[
                                Userset(this=dict()),
                                Userset(computed_userset=ObjectRelation(
                                    object="",
                                    relation="writer",
                                )),
                            ],
                        ),
                    ),
                )
            ),
        ],
    )

    response = await api_instance.write_authorization_model(type_definitions)
    # response.authorization_model_id = "1uHxCSuTP0VKPYSnkq1pbb1jeZw"
    await api_client.close()
```


#### Read a Single Authorization Model

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/ReadAuthorizationModel)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Return a particular version of an authorization model
async def read_authorization_id():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    id = "1uHxCSuTP0VKPYSnkq1pbb1jeZw" #  Assuming `1uHxCSuTP0VKPYSnkq1pbb1jeZw` is an id of an existing model

    response = await api_instance.read_authorization_model(id)
    # response.authorization_model =  AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...])
    await api_client.close()
```

#### Read Authorization Model IDs

[API Documentation]({{apiDocsUrl}}#/Authorization%20Models/ReadAuthorizationModels)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Return all the authorization models for a particular store
async def read_authorization_models():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    response = await api_instance.read_authorization_models()
    # response.authorization_models = [AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...], AuthorizationModel(id='GtQpMohWezFmIbyXxVEocOCxxgq', type_definitions=type_definitions[...])]
    await api_client.close()
```


#### Check

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/Check)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Check whether a user is authorized to access an object
async def check():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    body = CheckRequest(
        tuple_key=TupleKey(
            user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
            relation="viewer",
            object="document:roadmap",
        ),
    )

    response = await api_instance.check(body)
    # response.allowed = True
    await api_client.close()
```


#### Write Tuples

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Write)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Add tuples from the store
async def write():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    body = WriteRequest(
        writes=TupleKeys(
            tuple_keys=[
                TupleKey(
                    user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
                    relation="viewer",
                    object="document:roadmap",
                ),
            ],
        ),
    )

    response = await api_instance.write(body)
    await api_client.close()
```

#### Delete Tuples

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Write)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Delete tuples from the store
async def delete():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    body = WriteRequest(
        deletes=TupleKeys(
            tuple_keys=[
                TupleKey(
                    user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
                    relation="viewer",
                    object="document:roadmap",
                ),
            ],
        ),
    ) 

    response = await api_instance.write(body)
    await api_client.close()
```

#### Expand

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/Expand)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
async def expand():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    body = ExpandRequest(
        tuple_key=TupleKey(
            relation="viewer",
            object="document:roadmap",
        ),
    )

    response = await api_instance.expand(body)
    # response = ExpandResponse({"tree": UsersetTree({"root": Node({"name": "document:roadmap#viewer", "leaf": Leaf({"users": Users({"users": ["user:81684243-9356-4421-8fbf-a4f8d36aa31b", "user:f52a4f7a-054d-47ff-bb6e-3ac81269988f"]})})})})})
    await api_client.close()
```

#### Read Changes

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/Read)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

async def read():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    # Find if a relationship tuple stating that a certain user is a viewer of certain document
    body = ReadRequest(
        tuple_key=TupleKey(
            user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
            relation="viewer",
            object="document:roadmap",
        ),
    ) 

    # Find all relationship tuples where a certain user has a relationship as any relation to a certain document
    body = ReadRequest(
        tuple_key=TupleKey(
            user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
            object="document:roadmap",
        ),
    ) 

    # Find all relationship tuples where a certain user is a viewer of any document
    body = ReadRequest(
        tuple_key=TupleKey(
            user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
            relation="viewer",
            object="document:",
        ),
    )

    # Find all relationship tuples where any user has a relationship as any relation with a particular document
    body = ReadRequest(
        tuple_key=TupleKey(
            object="document:roadmap",
        ),
    )

    response = await api_instance.read(body)
    # response = ReadResponse({"tuples": [Tuple({"key": TupleKey({"user":"...","relation":"...","object":"..."}), "timestamp": datetime.fromisoformat("...") })]})
    await api_client.close()
```

#### Read Changes (Watch)

[API Documentation]({{apiDocsUrl}}#/Relationship%20Tuples/ReadChanges)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# Return a list of all the tuple changes
async def read_changes():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)

    type = "document"
    page_size = 25
    continuation_token = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="

    response = await api_instance.read_changes(type=type, page_size=page_size, continuation_token=continuation_token)
    # response.continuation_token = ...
    # response.changes = [TupleChange(tuple_key=TupleKey(object="...",relation="...",user="..."),operation=TupleOperation("TUPLE_OPERATION_WRITE"),timestamp=datetime.fromisoformat("..."))]
    await api_client.close()
```

#### List Objects

[API Documentation]({{apiDocsUrl}}#/Relationship%20Queries/ListObjects)

```python
configuration = openfga_sdk.Configuration(
    api_scheme = os.environ.get({{appUpperCaseName}}_API_SCHEME),
    api_host = os.environ.get({{appUpperCaseName}}_API_HOST),
    store_id = os.environ.get({{appUpperCaseName}}_STORE_ID),
)

# ListObjects lists all of the object ids for objects of the provided type that the given user has a specific relation with.
async def list_objects():
    # Create an instance of the API class
    api_client = openfga_sdk.ApiClient(configuration)
    api_instance = open_fga_api.OpenFgaApi(api_client)
    body = ListObjectsRequest(
        user="user:81684243-9356-4421-8fbf-a4f8d36aa31b",
        relation="viewer",
        type="document",
    )

    response = await api_instance.list_objects(body)
    # response.object_ids = ["roadmap"]
    await api_client.close()
```
