{{>partial_header}}

from inspect import getfullargspec
import pprint

from {{packageName}}.configuration import Configuration


{{#models}}
{{#model}}
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

{{#allowableValues}}
    allowable_values = [{{#enumVars}}{{name}}{{^-last}}, {{/-last}}{{/enumVars}}]

{{/allowableValues}}
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types: dict[str, str] = {
{{#vars}}
        '{{name}}': '{{{dataType}}}'{{^-last}},{{/-last}}
{{/vars}}
    }

    attribute_map: dict[str, str] = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{^-last}},{{/-last}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
{{#children}}
        '{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},{{/-last}}
{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{{defaultValue}}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}, local_vars_configuration=None):
        """{{classname}} - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = None
{{/vars}}
        self.discriminator = {{#discriminator}}'{{{discriminatorName}}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
{{#vars}}{{#-first}}
{{/-first}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
{{#isNullable}}
        self.{{name}} = {{name}}
{{/isNullable}}
{{^isNullable}}
        if {{name}} is not None:
            self.{{name}} = {{name}}
{{/isNullable}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.

{{#description}}
        {{{.}}}
{{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{dataType}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{.}}}
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type {{name}}: {{dataType}}
        """
{{^isNullable}}
{{#required}}
        if self.local_vars_configuration.client_side_validation and {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")
{{/required}}
{{/isNullable}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{#isArray}}
        if (self.local_vars_configuration.client_side_validation
                and not set({{{name}}}).issubset(set(allowed_values))):
            invalid_values = ", ".join(map(str, set({{{name}}}) - set(allowed_values)))
            valid_values = ", ".join(map(str, allowed_values))
            raise ValueError(
                f"Invalid values for `{{{name}}}` [{invalid_values}], must be a subset of [{valid_values}]"
            )
{{/isArray}}
{{#isMap}}
        if (self.local_vars_configuration.client_side_validation
                and not set({{{name}}}.keys()).issubset(set(allowed_values))):
            invalid_keys = ", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values)))
            valid_values = ", ".join(map(str, allowed_values))
            raise ValueError(
                f"Invalid keys in `{{{name}}}` [{invalid_keys}], must be a subset of [{valid_values}]"
            )
{{/isMap}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        if self.local_vars_configuration.client_side_validation and {{{name}}} not in allowed_values:
            raise ValueError(
                f"Invalid value for `{{name}}` ({{{{{name}}}}}), must be one of {allowed_values}"
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{/isEnum}}

        self._{{name}} = {{name}}

{{/vars}}
{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, {{classname}}):
            return True

        return self.to_dict() != other.to_dict()
{{/model}}
{{/models}}
