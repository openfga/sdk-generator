{{>partial_header}}

import json
from {{packageName}}.exceptions import ApiException
from {{packageName}}.model_utils import validate_and_convert_types
from {{packageName}}.model.internal_error_message_response import InternalErrorMessageResponse
from {{packageName}}.model.path_unknown_error_message_response import PathUnknownErrorMessageResponse
from {{packageName}}.model.validation_error_message_response import ValidationErrorMessageResponse

class AuthenticationError(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(AuthenticationError, self).__init__(status, reason, http_resp)


class NotFoundException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None, configuration=None):
        super(NotFoundException, self).__init__(status, reason, http_resp)
        self._parsed_exception = validate_and_convert_types(
            json.loads(http_resp.data),
            (PathUnknownErrorMessageResponse,),
            ['PathUnknownErrorMessageResponse'],
            True,
            True,
            configuration=configuration
        )

    @property
    def parsed_exception(self):
        """
        Return the parsed exception
        """
        return self._parsed_exception


class UnauthorizedException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(UnauthorizedException, self).__init__(status, reason, http_resp)


class ForbiddenException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(ForbiddenException, self).__init__(status, reason, http_resp)


class ServiceException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None, configuration=None):
        super(ServiceException, self).__init__(status, reason, http_resp)
        self._parsed_exception = validate_and_convert_types(
            json.loads(http_resp.data),
            (InternalErrorMessageResponse,),
            ['InternalErrorMessageResponse'],
            True,
            True,
            configuration=configuration
        )

    @property
    def parsed_exception(self):
        """
        Return the parsed exception
        """
        return self._parsed_exception


class ValidationException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None, configuration=None):
        super(ValidationException, self).__init__(status, reason, http_resp)
        self._parsed_exception = validate_and_convert_types(
            json.loads(http_resp.data),
            (ValidationErrorMessageResponse,),
            ['ValidationErrorMessageResponse'],
            True,
            True,
            configuration=configuration
        )

    @property
    def parsed_exception(self):
        """
        Return the parsed exception
        """
        return self._parsed_exception
