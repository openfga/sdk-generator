--- clients/fga-js-sdk/api.ts	2023-07-11 18:30:07
+++ api.ts	2023-07-11 18:29:04
@@ -133,10 +133,11 @@
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    createStore: async (options: any = {}): Promise<RequestArgs> => {
+    createStore: async (body: CreateStoreRequest, options: any = {}): Promise<RequestArgs> => {
             
       const localVarPath = "/stores"
             
@@ -313,11 +314,12 @@
     /**
          * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores. 
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    listStores: async (continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
+    listStores: async (pageSize?: number, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
             
       const localVarPath = "/stores"
             
@@ -698,11 +700,12 @@
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    async createStore(options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<CreateStoreResponse>> {
-      const localVarAxiosArgs = await localVarAxiosParamCreator.createStore(options);
+    async createStore(body: CreateStoreRequest, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<CreateStoreResponse>> {
+      const localVarAxiosArgs = await localVarAxiosParamCreator.createStore(body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials);
     },
     /**
@@ -750,12 +753,13 @@
     /**
          * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores. 
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    async listStores(continuationToken?: string, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<ListStoresResponse>> {
-      const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(continuationToken, options);
+    async listStores(pageSize?: number, continuationToken?: string, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<ListStoresResponse>> {
+      const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials);
     },
     /**
@@ -873,11 +877,12 @@
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    createStore(options?: any): PromiseResult<CreateStoreResponse> {
-      return localVarFp.createStore(options).then((request) => request(axios));
+    createStore(body: CreateStoreRequest, options?: any): PromiseResult<CreateStoreResponse> {
+      return localVarFp.createStore(body, options).then((request) => request(axios));
     },
     /**
          * Delete an OpenFGA store. This does not delete the data associated with the store, like tuples or authorization models.
@@ -920,12 +925,13 @@
     /**
          * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores. 
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    listStores(continuationToken?: string, options?: any): PromiseResult<ListStoresResponse> {
-      return localVarFp.listStores(continuationToken, options).then((request) => request(axios));
+    listStores(pageSize?: number, continuationToken?: string, options?: any): PromiseResult<ListStoresResponse> {
+      return localVarFp.listStores(pageSize, continuationToken, options).then((request) => request(axios));
     },
     /**
          * The Read API will return the tuples for a certain store that match a query filter specified in the body of the request. It is different from the `/stores/{store_id}/expand` API in that it only returns relationship tuples that are stored in the system and satisfy the query.  In the body: 1. `tuple_key` is optional. If not specified, it will return all tuples in the store. 2. `tuple_key.object` is mandatory if `tuple_key` is specified. It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 3. `tuple_key.user` is mandatory if tuple_key is specified in the case the `tuple_key.object` is a type only. ## Examples ### Query for all objects in a type definition To query for all objects that `user:bob` has `reader` relationship in the `document` type definition, call read API with body of ```json {  \"tuple_key\": {      \"user\": \"user:bob\",      \"relation\": \"reader\",      \"object\": \"document:\"   } } ``` The API will return tuples and a continuation token, something like ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `user:bob` has a `reader` relationship with 1 document `document:2021-budget`. Note that this API, unlike the List Objects API, does not evaluate the tuples in the store. The continuation token will be empty if there are no more tuples to query.### Query for all stored relationship tuples that have a particular relation and object To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`).  Note that, even if the model said that all `writers` are also `readers`, the API will not return writers such as `user:anne` because it only returns tuples and does not evaluate them. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`) and 1 `writer` (`user:anne`). 
@@ -1036,12 +1042,13 @@
   /**
      * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
      * @summary Create a store
+     * @param {CreateStoreRequest} body
      * @param {*} [options] Override http request option.
      * @throws { FgaError }
      * @memberof OpenFgaApi
      */
-  public createStore(options?: any) {
-    return OpenFgaApiFp(this.configuration, this.credentials).createStore(options).then((request) => request(this.axios));
+  public createStore(body: CreateStoreRequest, options?: any) {
+    return OpenFgaApiFp(this.configuration, this.credentials).createStore(body, options).then((request) => request(this.axios));
   }
 
   /**
@@ -1093,13 +1100,14 @@
   /**
      * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores. 
      * @summary List all stores
+     * @param {number} [pageSize]
      * @param {string} [continuationToken]
      * @param {*} [options] Override http request option.
      * @throws { FgaError }
      * @memberof OpenFgaApi
      */
-  public listStores(continuationToken?: string, options?: any) {
-    return OpenFgaApiFp(this.configuration, this.credentials).listStores(continuationToken, options).then((request) => request(this.axios));
+  public listStores(pageSize?: number, continuationToken?: string, options?: any) {
+    return OpenFgaApiFp(this.configuration, this.credentials).listStores(pageSize, continuationToken, options).then((request) => request(this.axios));
   }
 
   /**
